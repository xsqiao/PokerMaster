C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE POKERMASTER
OBJECT MODULE PLACED IN PokerMaster.OBJ
COMPILER INVOKED BY: D:\Apps\Keil\C51\BIN\C51.EXE PokerMaster.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "STC15F2K60S2.H"
   2          #include <stdlib.h>
   3          #include <intrins.h> 
   4          #define uint unsigned int
   5          #define uchar unsigned char
   6          #define ulong unsigned long
   7          #define cstAdcPower 0X80     /*ADC电源开关*/
   8          #define cstAdcFlag 0X10      /*当A/D转换完成后，cstAdcFlag要软件清零*/
   9          #define cstAdcStart 0X08     /*当A/D转换完成后，cstAdcStart会自动清零，所以要开始下一次转换，则需要置位*/
  10          #define cstAdcSpeed90 0X60   /*ADC转换速度 90个时钟周期转换一次*/
  11          #define cstAdcChs17 0X07     /*选择P1.7作为A/D输入*/
  12          
  13          
  14          sbit sbtVib = P2 ^ 4;     //振动传感器
  15          sbit sbtLedSel = P2 ^ 3;  //数码管与LED灯切换引脚
  16          sbit sbtKey1 = P3 ^ 2;
  17          sbit sbtKey2 = P3 ^ 3;
  18          bit btKey3Flag;             /*key3键按下标志*/
  19          sbit P3_5 = P3^5;           //红外线发送引脚
  20          sbit P3_7 = P3^7;           //串口1发送引脚
  21          uint i=0,j=0,flyCount=0,boomCount=0,turnFlag=1,findFlag,Temp,startFlag,endFlag,changFlag,HUIZHI;
  22          uchar duanxuan[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f}; //0-9
  23          uchar weixuan[]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};
  24          uchar HelloSeg[]={0x00,0x00,0x76,0x79,0x38,0x38,0x3f,0x00};
  25          uchar WinSeg[]={0x00,0x23,0x1c,0x23,0x00};
  26          uchar LoseSeg[]={0x00,0x23,0x54,0x23,0x00};
  27          uchar PingSeg[]={0x00,0x23,0x08,0x23,0x00};
  28          uint arrLed[] = {0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff};
  29          uint currLed[] = {0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe}; //当前LED为0，其余为1
  30          uint uiLed = 0x00, flicker = 0x00,LEDP=0x00;
  31          uint numCount=0,pageCount=3,currPage=0,currNum=0,ledCount=0,segCount=0;
  32          uint count[]={0,0,0,0,0,0,0,0,0,0};
  33          uint num[64];
  34          uchar ucNavKeyCurrent;  //导航按键当前的状态
  35          uchar ucNavKeyPast;     //导航按键前一个状态
  36          uint mybuf,X,DispalyFlag;
  37          uint begin_recive = 0,s_count=0;            //接收开始标志
  38          uint RIbuf[500],RICount=0;
  39          
  40          uint sum() {
  41   1        uint currSum=0;
  42   1        for(i=0; i<numCount; i++)
  43   1          currSum+=num[i];
  44   1        return currSum;
  45   1      }
  46          
  47          void DelCurr() {
  48   1          count[num[currNum]]--;
  49   1          for(i=currNum; i<numCount; i++)
  50   1              num[i]=num[i+1];
  51   1          numCount--;
  52   1          pageCount=numCount/8+((numCount%8!=0)?1:0);   
  53   1        if(currNum>=numCount) currNum=numCount-1;
  54   1      }
  55          
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 2   

  56          void DelI() {
  57   1        count[num[i]]--;
  58   1        for(j=i; j<numCount; j++)
  59   1          num[j]=num[j+1];
  60   1        numCount--;
  61   1        pageCount=numCount/8+((numCount%8!=0)?1:0);
  62   1      }
  63          
  64          unsigned char GetADC() {
  65   1          uchar ucAdcRes;
  66   1          ADC_CONTR = cstAdcPower | cstAdcStart | cstAdcSpeed90 | cstAdcChs17;//没有将cstAdcFlag置1，用于判断A/D
             -是否结束
  67   1          _nop_();
  68   1          _nop_();
  69   1          _nop_();
  70   1          _nop_();
  71   1          while( !( ADC_CONTR & cstAdcFlag ) ); //等待直到A/D转换结束
  72   1          ADC_CONTR &= ~cstAdcFlag;           //cstAdcFlagE软件清0
  73   1          ucAdcRes = ADC_RES;                 //获取AD的值
  74   1          return ucAdcRes;
  75   1      }
  76          
  77          void getRandOne() {
  78   1          for(i=numCount; i>0; i--)
  79   1            num[i]=num[i-1];
  80   1          num[0]=(uint)rand()%9+1;
  81   1          while(count[num[0]]==4)
  82   1              num[0]=(uint)rand()%9+1;
  83   1          count[num[0]]++;
  84   1          numCount++;
  85   1          pageCount=numCount/8+((numCount%8!=0)?1:0);
  86   1      }
  87          
  88          void Delay5ms() {
  89   1          unsigned char i, j;
  90   1          i = 54;
  91   1          j = 199;
  92   1          do {
  93   2              while ( --j );
  94   2          }
  95   1          while ( --i );
  96   1      }
  97          
  98          void Delay200ms()   //@11.0592MHz
  99          {
 100   1        unsigned char i, j, k;
 101   1      
 102   1        _nop_();
 103   1        _nop_();
 104   1        i = 9;
 105   1        j = 104;
 106   1        k = 139;
 107   1        do
 108   1        {
 109   2          do
 110   2          {
 111   3            while (--k);
 112   3          } while (--j);
 113   2        } while (--i);
 114   1      }
 115          
 116          uchar NavKeyCheck() {
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 3   

 117   1          unsigned char key;
 118   1          key = GetADC();     //获取AD的值
 119   1          if( key != 255 )    //有按键按下时
 120   1          {
 121   2              Delay5ms();
 122   2              key = GetADC();
 123   2              if( key != 255 )            //按键消抖 仍有按键按下
 124   2              {
 125   3                  key = key & 0xE0;       //获取高3位，其他位清零
 126   3                  key = _cror_( key, 5 ); //循环右移5位 获取A/D转换高三位值，减小误差
 127   3                  return key;
 128   3              }
 129   2          }
 130   1          return 0x07;        //没有按键按下时返回值0x07
 131   1      }
 132          
 133          uint shunzi() {
 134   1          if(num[currNum]>5)
 135   1            return 0;
 136   1          if(count[num[currNum]]>0&&count[num[currNum]+1]>0&&count[num[currNum]+2]>0
 137   1            &&count[num[currNum]+3]>0&&count[num[currNum]+4]>0)
 138   1            return 1;
 139   1          return 0;
 140   1      }
 141          
 142          uint feiji() {
 143   1          if(num[currNum]>8)
 144   1            return 0;
 145   1          if(count[num[currNum]]>2&&count[num[currNum]+1]>2)
 146   1            return 1;
 147   1          return 0;
 148   1      }
 149          
 150          uint boom() {
 151   1          if(count[num[currNum]]>=4)
 152   1            return 1;
 153   1          return 0;
 154   1      }
 155          
 156          void Delay(int n) {
 157   1          while(n--);
 158   1      }
 159          
 160          void sort() {
 161   1          for(i=0; i<numCount; i++) {
 162   2              for(j=i+1; j<numCount; j++) {
 163   3                  if(num[i]>num[j]) {
 164   4                      Temp=num[i];
 165   4                      num[i]=num[j];
 166   4                      num[j]=Temp;
 167   4                  }
 168   3              }
 169   2          }
 170   1      }
 171          
 172          void Vib() {
 173   1          sbtVib=1;
 174   1          Delay(40);
 175   1          if(sbtVib==0) {
 176   2              sort();
 177   2          } 
 178   1      }
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 4   

 179          
 180          void UseShunzi() {
 181   1        Temp=num[currNum]+rand()%5; 
 182   1        REN = 0;  
 183   1        X=Temp;
 184   1        SBUF = 0xca;//发出发送标志0xca，触发串口中断进行数据发送
 185   1        
 186   1        Temp=num[currNum];
 187   1        DelCurr();
 188   1        for(Temp=Temp+1; Temp<=9; Temp++) {
 189   2          findFlag=0;
 190   2          for(i=0; i<numCount; i++) {
 191   3            if(num[i]==Temp){
 192   4              DelI();
 193   4              findFlag=1;
 194   4              break;
 195   4            }
 196   3          }
 197   2          if(!findFlag) break;
 198   2        }
 199   1      }
 200          
 201          void UseFeiji() {
 202   1        Temp=num[currNum];
 203   1        for(; Temp<=9; Temp++) {
 204   2          if(count[Temp]<3) break;
 205   2          findFlag=3;
 206   2          for(i=0; i<numCount; i++) {
 207   3            if(findFlag==0) break;
 208   3            if(num[i]==Temp) {
 209   4              DelI();
 210   4              i--;
 211   4              findFlag--;
 212   4            }
 213   3          }
 214   2        }
 215   1      }
 216          
 217          void UseBoom() {
 218   1        Temp=num[currNum];
 219   1        count[Temp]=0;
 220   1        DelCurr();
 221   1        for(i=0; i<numCount; i++)
 222   1          if(num[i]==Temp) {
 223   2            DelI();
 224   2            i--;
 225   2          }
 226   1      }
 227          
 228          void AddOne() {
 229   1          count[num[currNum]]--;
 230   1          if(num[currNum]==9) {
 231   2            num[currNum]=1;
 232   2          } else {
 233   2            num[currNum]++;
 234   2          }
 235   1          count[num[currNum]]++;
 236   1      }
 237          
 238          void KeyTest() {//三按键检测、特殊功能牌使用
 239   1          if(btKey3Flag&&shunzi()&&flyCount==0&&boomCount==0) {
 240   2              UseShunzi();
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 5   

 241   2              turnFlag=0;
 242   2              changFlag=1;
 243   2              return;
 244   2          } 
 245   1          else if(num[currNum]!=0&&sbtKey2==0&&flyCount>0) {
 246   2              REN = 0;  
 247   2              X=num[currNum];
 248   2              DelCurr();
 249   2              SBUF = 0xca;//发出发送标志0xca，触发串口中断进行数据发送
 250   2              flyCount--;
 251   2              turnFlag--;
 252   2              changFlag=1;
 253   2              Delay200ms();
 254   2              return;
 255   2          } 
 256   1          else if(sbtKey2==0&&flyCount==0&&feiji()) {
 257   2              UseFeiji();
 258   2              turnFlag=2;
 259   2              changFlag=0;
 260   2              flyCount=2;
 261   2              Delay200ms();
 262   2              return;
 263   2          } 
 264   1          else if(num[currNum]!=0&&sbtKey1==0&&boomCount>0) {
 265   2              DelCurr();
 266   2              boomCount--;
 267   2              turnFlag--;
 268   2              changFlag=1;
 269   2              Delay200ms();
 270   2              return;
 271   2          } 
 272   1          else if(sbtKey1==0&&boomCount==0&&boom()) {
 273   2              UseBoom();
 274   2              turnFlag=2;
 275   2              changFlag=0;
 276   2              boomCount=2;
 277   2              Delay200ms();
 278   2              return;
 279   2          }
 280   1      }
 281          
 282          void NavKey_Process() {
 283   1          ucNavKeyCurrent=NavKeyCheck();    //获取当前ADC值
 284   1          if(ucNavKeyCurrent!=0x07) {      /*导航按键是否被按下 不等于0x07表示有按下*/
 285   2              ucNavKeyPast=ucNavKeyCurrent;
 286   2              while(ucNavKeyCurrent!=0x07)        //等待导航按键松开
 287   2                  ucNavKeyCurrent=NavKeyCheck();
 288   2              switch(ucNavKeyPast) {
 289   3                  case 0x00 :                     //K3
 290   3                      btKey3Flag=1;
 291   3                      break;
 292   3                  case 0x04:                     //左
 293   3                      if(currNum>0) {
 294   4                          currNum--;
 295   4                          currPage=currNum/8;
 296   4                      } else {
 297   4                          currNum=numCount-1;
 298   4                          currPage=currNum/8;
 299   4                      }
 300   3                      break;
 301   3                  case 0x01 :                     //右
 302   3                      if(currNum<numCount-1) {
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 6   

 303   4                          currNum++;
 304   4                          currPage=currNum/8;
 305   4                      } else {
 306   4                          currNum=0;
 307   4                          currPage=0;
 308   4                      }
 309   3                      break;
 310   3                  case 0x05:                     //上
 311   3                      if(num[currNum]!=0/*&&turnFlag*/&&boomCount==0&&flyCount==0) {
 312   4                          REN = 0;  
 313   4                          X=num[currNum];
 314   4                          DelCurr();
 315   4                          SBUF = 0xca;//发出发送标志0xca，触发串口中断进行数据发送
 316   4                          //turnFlag=0;
 317   4                          changFlag=1;
 318   4                          Delay200ms();
 319   4                      }
 320   3                      break;
 321   3                  case 0x02 :                     //下
 322   3                      if(/*turnFlag&&*/boomCount==0&&flyCount==0) {
 323   4                          getRandOne();
 324   4                          //turnFlag=0;
 325   4                          changFlag=1;
 326   4                      }
 327   3                      break;
 328   3                  case 0x03 :                       //里
 329   3                      if(/*turnFlag&&*/boomCount==0&&flyCount==0) {
 330   4                          AddOne();
 331   4                          //turnFlag=0;
 332   4                          changFlag=1;
 333   4                      }
 334   3                      break;
 335   3              }
 336   2          }
 337   1      }
 338          
 339          void Hello() {
 340   1          sbtLedSel = 0;
 341   1          for(j=0; j<400; j++)
 342   1            for(i=0; i<8; i++) {
 343   2                P0=0;
 344   2                P2=weixuan[i];
 345   2                P0=HelloSeg[i];
 346   2                Delay(500);
 347   2            }
 348   1          Delay(1000);
 349   1      }
 350          
 351          void showWin() {
 352   1          Temp=sum();
 353   1          sbtLedSel = 0;
 354   1          for(i=0; i<5; i++) {
 355   2            P0=0;
 356   2            P2=weixuan[i];
 357   2            P0=WinSeg[i];
 358   2            Delay(500);
 359   2          }
 360   1          P0=0;
 361   1          P2=weixuan[5];
 362   1          P0=duanxuan[(Temp/100)%10];
 363   1          Delay(500);
 364   1          P0=0;
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 7   

 365   1          P2=weixuan[6];
 366   1          P0=duanxuan[(Temp/10)%10];
 367   1          Delay(500);
 368   1          P0=0;
 369   1          P2=weixuan[7];
 370   1          P0=duanxuan[Temp%10];
 371   1          Delay(500);
 372   1      }
 373          
 374          void showLose() {
 375   1          Temp=sum();
 376   1          sbtLedSel = 0;
 377   1          for(i=0; i<5; i++) {
 378   2            P0=0;
 379   2            P2=weixuan[i];
 380   2            P0=LoseSeg[i];
 381   2            Delay(500);
 382   2          }
 383   1          P0=0;
 384   1          P2=weixuan[5];
 385   1          P0=duanxuan[(Temp/100)%10];
 386   1          Delay(500);
 387   1          P0=0;
 388   1          P2=weixuan[6];
 389   1          P0=duanxuan[(Temp/10)%10];
 390   1          Delay(500);
 391   1          P0=0;
 392   1          P2=weixuan[7];
 393   1          P0=duanxuan[Temp%10];
 394   1          Delay(500);
 395   1      }
 396          
 397          //void showPing() {
 398          //    Temp=sum();
 399          //    sbtLedSel = 0;
 400          //    for(i=0; i<5; i++) {
 401          //      P0=0;
 402          //      P2=weixuan[i];
 403          //      P0=PingSeg[i];
 404          //      Delay(500);
 405          //    }
 406          //    P0=0;
 407          //    P2=weixuan[5];
 408          //    P0=duanxuan[(Temp/100)%10];
 409          //    Delay(500);
 410          //    P0=0;
 411          //    P2=weixuan[6];
 412          //    P0=duanxuan[(Temp/10)%10];
 413          //    Delay(500);
 414          //    P0=0;
 415          //    P2=weixuan[7];
 416          //    P0=duanxuan[Temp%10];
 417          //    Delay(500);
 418          //}
 419          
 420          void Display() {//数码管、LED的显示
 421   1          sbtLedSel = 0;
 422   1          for(i=0; i<8&&8*currPage+i<numCount; i++) {
 423   2            P0 = 0;
 424   2            P2 = weixuan[i];//选择数码管的位数
 425   2            if(i==currNum%8) {
 426   3              if(segCount<60) {
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 8   

 427   4                  P0 = 0;
 428   4                  segCount++;
 429   4              } else if(segCount<120) {
 430   4                  P0 = duanxuan[num[8*currPage+i]];
 431   4                  segCount++;
 432   4              } else {
 433   4                  segCount=0;
 434   4              }
 435   3            } else {
 436   3              P0 = duanxuan[num[8*currPage+i]];  //显示对应的数值
 437   3            }
 438   2            Delay(400);
 439   2          }
 440   1          P0=LEDP;
 441   1          sbtLedSel = 1;
 442   1          if(ledCount<60) {
 443   2            LEDP=uiLed&flicker|turnFlag;
 444   2            ledCount++;
 445   2          } else if(ledCount<120) {
 446   2            LEDP=uiLed|turnFlag;
 447   2            ledCount++;
 448   2          } else {
 449   2            LEDP=uiLed&flicker|turnFlag;
 450   2            ledCount=0;
 451   2          }
 452   1          Delay(200);
 453   1          uiLed=arrLed[pageCount];
 454   1          flicker=currLed[currPage];
 455   1          P0=0;
 456   1      }
 457          
 458          void Init() {
 459   1          AUXR |= 0x40;   //定时器T1为1T模式，速度是传统8051的12倍，不分频。
 460   1          TMOD &= 0x0F;   //清除T1模式位
 461   1          TMOD |= 0x20;   //设置T1模式位，使用8位自动重装模式
 462   1          TL1 = 0x70;     //设置初值
 463   1          TH1 = 0x70;     //设置T1重装值
 464   1          TR1 = 1;        //T1运行控制位置1，允许T1计数
 465   1          
 466   1          AUXR |= 0x80;   //定时器T0为1T模式，的速度是传统8051的12倍，不分频。
 467   1          TMOD &= 0xF0;   //清除T0模式位
 468   1          TMOD |= 0x02;   //设置T0模式位，使用8位自动重装模式
 469   1          TL0 = 0x70;     //设置初值
 470   1          TH0 = 0x70;     //设T0重装值
 471   1          TF0 = 0;        //T0溢出标志位清零
 472   1          TR0 = 1;        //T0运行控制位置1，允许T0计数
 473   1          
 474   1          //定时器T2用于显示和按键消抖，500us定时16位自动重装
 475   1          AUXR |= 0x04;   //定时器T2为1T模式
 476   1          T2L = 0x66;     //低位重装值
 477   1          T2H = 0xEA;     //高位重装值
 478   1          AUXR |= 0x10;   //定时器2开始计时
 479   1        
 480   1          PCON &= 0x7F;   //波特率不倍速，SMOD=0
 481   1          SCON = 0x50;    //串口1使用工作方式1，REN=1(允许串行接收)
 482   1          AUXR &= 0xFE;   //串口1选择定时器T1作为波特率发生器，S1ST2=0
 483   1          AUXR1 = 0x40;   //串口1在P3.6接收，在P3.7发送
 484   1          PS = 1;         //设置串口中断为最高优先级
 485   1        
 486   1          P0M1 = 0x00;
 487   1          P0M0 = 0xff;
 488   1          P2M1 = 0x00;
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 9   

 489   1          P2M0 = 0xff;
 490   1          //P2M0 = 0x08;
 491   1        
 492   1          sbtLedSel = 0;      //选择数码管作为输出
 493   1          P1ASF = 0x80;       //P1.7作为模拟功能A/D使用
 494   1          ADC_RES = 0;        //转换结果清零
 495   1          ADC_CONTR = 0x8F;   //cstAdcPower = 1
 496   1          CLK_DIV = 0X00;     //ADRJ = 0    ADC_RES存放高八位结果
 497   1          
 498   1          ET1 = 0;      //禁止T1中断
 499   1          ET0 = 1;      //打开定时器T0中断
 500   1          ES = 1;       //打开串口1中断
 501   1          IE2 = 0X04;   //打开定时器2中断
 502   1          
 503   1          IT0 = 0;            //设置IT0上升沿触发
 504   1          IT1 = 0;
 505   1          EA = 1;             //CPU开放中断
 506   1          LEDP=0x00;
 507   1          btKey3Flag=0;
 508   1          startFlag=1;
 509   1          endFlag=0;
 510   1          turnFlag=1;
 511   1          DispalyFlag=1;
 512   1          changFlag=1;
 513   1          HUIZHI=0;
 514   1      }
 515          
 516          void Time0() interrupt 1
 517          {
 518   1        if(P3_7==0)     //P3_5根据P3_7的信号产生脉冲
 519   1        {
 520   2          P3_5 = ~P3_5;
 521   2        }
 522   1        else            //如果P3.7=1则P3.5输出0
 523   1          P3_5 = 0;
 524   1      }
 525          
 526          
 527          /********************************
 528           * 函数名：URAT1
 529           * 描述  ：串口1中断的操作。发送完毕TI自动置1，产生中断; 接收完毕RI值1，产生中断
 530           * 输入  ：无
 531           * 输出  ：无
 532          ********************************/
 533          void URAT1() interrupt 4
 534          {
 535   1        if(TI)                        //判断发送中断
 536   1        { 
 537   2          TI = 0;                     //发送中断请求标志位清0
 538   2          if(s_count < 1)         //发送个数小于显示个数
 539   2          {
 540   3            SBUF=X; //继续发送
 541   3            s_count ++;
 542   3          }
 543   2          else
 544   2          {
 545   3            if(s_count == 1)      //发送个数等于显示个数
 546   3            { 
 547   4              s_count ++;
 548   4              SBUF = 0x55;            //发送结束标志
 549   4            }
 550   3            else                      //发送完毕后，已发送个数清零，打开串口接收
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 10  

 551   3            {
 552   4              s_count = 0;
 553   4              REN = 1;                  
 554   4            }
 555   3          }
 556   2        } 
 557   1        if(RI)                        //判断是否接收中断
 558   1        {
 559   2          RI = 0;                     //接收中断请求标志位清0
 560   2          mybuf = SBUF;               //把这次接收到的数据存入自定义的缓存中
 561   2          if(mybuf == 0x55)           //判断接收结束
 562   2          {
 563   3            begin_recive = 0;         //接收结束
 564   3            IE2 = 0x04;               //打开定时2中断
 565   3          }
 566   2          if(begin_recive)            //如果开始了
 567   2          { 
 568   3            RIbuf[RICount] = SBUF;    //接收数据
 569   3            RICount++;                //显示个数+1
 570   3            }
 571   2          }
 572   1          if(mybuf == 0xca)           //判断开始接收标志
 573   1          {
 574   2            begin_recive = 1;         //接收开始
 575   2            IE2 = 0x00;               //关闭定时器T2中断，停止按键检测与数码管扫描
 576   2            P0 = 0;             
 577   2            RICount = 0;                //显示个数清零
 578   2          }
 579   1      }
 580          
 581          void Deal() {//发牌
 582   1          for(i=0; i<20; i++) {
 583   2            num[i]=(uint)rand()%9+1;
 584   2            if(count[num[i]]==3)
 585   2                num[i]=(uint)rand()%9+1;
 586   2            while(count[num[i]]==4)
 587   2                num[i]=(uint)rand()%9+1;
 588   2            count[num[i]]++;
 589   2          }
 590   1          numCount=20;
 591   1          pageCount=3;
 592   1          currPage=0;
 593   1          currNum=0;
 594   1      }
 595          
 596          void RICheck() {
 597   1            if(RICount==0) return;
 598   1            while(RICount>0) {
 599   2            if(RIbuf[0]==0x55||RIbuf[0]==0xca) {
 600   3            }
 601   2            else if(!startFlag&&RIbuf[0]>=10) {//游戏结束
 602   3                Temp=sum()+10;
 603   3                REN=0;  
 604   3                X=Temp;
 605   3                SBUF = 0xca;//发出发送标志0xca，触发串口中断进行数据发送
 606   3              //}
 607   3              while(1) {showLose();}
 608   3            } else if(RIbuf[0]>0&&RIbuf[0]<10){
 609   3                for(i=numCount; i>0; i--)
 610   3                  num[i]=num[i-1];
 611   3                  num[0]=RIbuf[0];
 612   3                  count[RIbuf[0]]++;
C51 COMPILER V9.51   POKERMASTER                                                           09/05/2019 08:36:50 PAGE 11  

 613   3                  numCount++;
 614   3                  pageCount=numCount/8+((numCount%8!=0)?1:0); 
 615   3              }
 616   2            for(j=0; j<RICount-1; j++)
 617   2              RIbuf[j]=RIbuf[j+1];
 618   2            RICount--;  
 619   2          }
 620   1      }
 621          
 622          void Timer2() interrupt 12
 623          {
 624   1        Vib();
 625   1        RICheck();
 626   1      }
 627          
 628          void main() {
 629   1          Init();
 630   1          Deal();
 631   1          Hello();
 632   1          while(1) {
 633   2            if(turnFlag==0) turnFlag=1;
 634   2            startFlag=0;
 635   2            Vib();
 636   2            sbtVib=1;
 637   2            Display();
 638   2            P0 = 0;       //P0清零
 639   2            Vib();
 640   2            NavKey_Process();
 641   2            Vib();
 642   2            KeyTest();
 643   2            Vib();
 644   2            btKey3Flag=0;
 645   2            if(numCount==0) {
 646   3                REN = 0;  
 647   3                X=10;
 648   3                SBUF = 0xca;//发出发送标志0xca，触发串口中断进行数据发送      
 649   3                while(1) showWin();
 650   3            }
 651   2            Vib();
 652   2          }
 653   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5309    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1277    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
